import ij.ImagePlus;
import ij.process.ImageProcessor;
import ij.plugin.filter.PlugInFilter;
import java.awt.Color;
import ij.*;

public class CumulativeHistogramHSV2 implements PlugInFilter {
    public int setup(String args, ImagePlus im) {
        return DOES_RGB;
    }
    public void run(ImageProcessor ip) {
        int M = ip.getWidth();
        int N = ip.getHeight();
        Color color;
        float[] hsv  = new float[3];
        float[] h = new float[360];
        float[] s = new float[101];
        float[] v = new float[101];

        int red, green, blue;

        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) { 
                color = new Color(ip.getPixel(j,i));
                red = color.getRed();
                green = color.getGreen();
                blue = color.getBlue();
                Color.RGBtoHSB (red, green, blue, hsv);
                h[(int) (hsv[0]*360)] += 1;
                s[(int) (hsv[1]*100)] += 1;
                v[(int) (hsv[2]*100)] += 1;
            }
        }

        for (int j = 1; j < h.length; j++) {
            h[j] = h[j - 1] + h[j];
        } 
        for (int j = 1; j < s.length; j++) {
            s[j] = s[j - 1] + s[j];
            v[j] = v[j - 1] + v[j];
        }
        for (int j = 0; j < h.length; j++) {
            h[j] = h[j] / (M * N);
        }
        for (int j = 0; j < s.length; j++) {
            s[j] = s[j] / (M * N);
            v[j] = v[j] / (M * N);
        }
        double[] benchmark_histogram_h = {0.080809236, 0.08292745, 0.08560375, 0.08905378, 0.09179351, 0.095509894, 0.09920091, 0.1071791, 0.11491629, 0.11873414, 0.14157788, 0.1652207, 0.17895739, 0.20676053, 0.21690767, 0.2646626, 0.305898, 0.37560883, 0.43625063, 0.5449518, 0.6544013, 0.75091326, 0.79978436, 0.81962204, 0.83017504, 0.8406773, 0.8445332, 0.8458524, 0.8462709, 0.84634703, 0.846588, 0.8469812, 0.84876966, 0.8488585, 0.84902334, 0.849277, 0.84937847, 0.85372907, 0.85390663, 0.87810755, 0.87819636, 0.8789447, 0.88150686, 0.88172245, 0.8819508, 0.88300353, 0.8830289, 0.8830543, 0.89595383, 0.90060884, 0.90060884, 0.9007737, 0.9007864, 0.9007864, 0.9007864, 0.9007864, 0.9007864, 0.9007864, 0.9007864, 0.9007864, 0.94932777, 0.94932777, 0.94932777, 0.94932777, 0.94932777, 0.94932777, 0.94932777, 0.94949263, 0.94949263, 0.94949263, 0.95053273, 0.95053273, 0.95684934, 0.95684934, 0.95684934, 0.95684934, 0.95684934, 0.95684934, 0.95684934, 0.95684934, 0.95684934, 0.95684934, 0.95684934, 0.95684934, 0.9572933, 0.957344, 0.957344, 0.957344, 0.957344, 0.957344, 0.957344, 0.957344, 0.957344, 0.957344, 0.957344, 0.957344, 0.957344, 0.957344, 0.957344, 0.957344, 0.9592339, 0.9592339, 0.9592339, 0.9592339, 0.9592339, 0.9592339, 0.9592339, 0.9592339, 0.9592339, 0.9592339, 0.95927197, 0.95927197, 0.95927197, 0.95927197, 0.95927197, 0.95927197, 0.95927197, 0.95927197, 0.95927197, 0.95927197, 0.95927197, 0.95927197, 0.95927197, 0.95927197, 0.95927197, 0.95927197, 0.95927197, 0.95927197, 0.95927197, 0.95927197, 0.95927197, 0.95927197, 0.9593227, 0.9593227, 0.9593227, 0.9593227, 0.9593227, 0.9593227, 0.9593227, 0.9593227, 0.9593227, 0.9593227, 0.9593227, 0.9593227, 0.9593227, 0.9593227, 0.9593227, 0.9593227, 0.9593227, 0.9593227, 0.961276, 0.961276, 0.961276, 0.961276, 0.961276, 0.961276, 0.961276, 0.961276, 0.961276, 0.961276, 0.9612887, 0.9612887, 0.9612887, 0.9612887, 0.9612887, 0.9614282, 0.9614282, 0.9614282, 0.9614282, 0.9614282, 0.9614282, 0.9614282, 0.9614282, 0.9614282, 0.9614282, 0.9614282, 0.9614282, 0.9614282, 0.9614282, 0.9614282, 0.9614282, 0.9614282, 0.9614282, 0.9614282, 0.9614282, 0.9614282, 0.9614282, 0.9614282, 0.9614282, 0.9614282, 0.9614282, 0.96145356, 0.96145356, 0.96145356, 0.96145356, 0.96145356, 0.96145356, 0.96145356, 0.96145356, 0.96145356, 0.96145356, 0.96145356, 0.96145356, 0.96145356, 0.96145356, 0.96150434, 0.961517, 0.961517, 0.961517, 0.961517, 0.961517, 0.961517, 0.961517, 0.961517, 0.9615297, 0.9615297, 0.9615297, 0.96156776, 0.96156776, 0.96156776, 0.96178335, 0.96182144, 0.96182144, 0.96184677, 0.96187216, 0.9619483, 0.9619483, 0.9619609, 0.96202433, 0.96202433, 0.96208775, 0.96213853, 0.96213853, 0.96213853, 0.96213853, 0.96213853, 0.96215117, 0.96216387, 0.96216387, 0.96216387, 0.9644343, 0.9644343, 0.9644343, 0.96444696, 0.96445966, 0.96447235, 0.96447235, 0.96448505, 0.96448505, 0.9645358, 0.9645358, 0.9645358, 0.96471334, 0.96471334, 0.96471334, 0.96471334, 0.96471334, 0.96471334, 0.96471334, 0.96471334, 0.96471334, 0.96471334, 0.96471334, 0.96471334, 0.9649036, 0.9649543, 0.9649543, 0.9649543, 0.9649543, 0.9649543, 0.9649543, 0.9649543, 0.9649543, 0.9649543, 0.9649543, 0.9649543, 0.9649543, 0.9649543, 0.9649543, 0.965969, 0.965969, 0.965969, 0.9659817, 0.9659817, 0.9659817, 0.9659817, 0.9659817, 0.9659817, 0.9659817, 0.9659817, 0.96607053, 0.96607053, 0.96607053, 0.96607053, 0.96607053, 0.96607053, 0.96607053, 0.96607053, 0.96607053, 0.96607053, 0.96609586, 0.96609586, 0.96609586, 0.96609586, 0.96609586, 0.96609586, 0.96609586, 0.96609586, 0.96609586, 0.96609586, 0.96609586, 0.96609586, 0.9664891, 0.9664891, 0.9664891, 0.9664891, 0.9664891, 0.9664891, 0.9664891, 0.9664891, 0.9665779, 0.9665779, 0.9665779, 0.9665779, 0.9665779, 0.9665779, 0.9666159, 0.9666159, 0.9666159, 0.9666159, 0.979135, 0.979135, 0.979135, 0.979135, 0.979135, 0.979135, 0.979135, 0.979135, 0.97921103, 0.97921103, 0.9801497, 0.9801624, 0.9801624, 0.9801624, 0.9801877, 0.98294014, 0.98295283, 0.98300356, 0.98324454, 0.98340946, 0.9847032, 0.9857052, 0.9873668, 0.99069, 0.9924277, 0.9936073, 0.99562407, 0.99728566, 0.9987443, 1.0};
        double[] benchmark_histogram_s = {0.07393455, 0.08925672, 0.09270675, 0.101509385, 0.10861238, 0.11371131, 0.11721207, 0.12007864, 0.12293252, 0.12501268, 0.12743531, 0.1297311, 0.13262303, 0.13656773, 0.14208524, 0.14997463, 0.15896752, 0.16154237, 0.17142314, 0.17224759, 0.18268645, 0.18598427, 0.19271943, 0.19641045, 0.19685438, 0.20470573, 0.20659563, 0.21007103, 0.21357179, 0.21514459, 0.21738964, 0.21968544, 0.22039574, 0.22552004, 0.22640792, 0.229414, 0.2313039, 0.234069, 0.23878741, 0.24316336, 0.25136986, 0.26078132, 0.27090308, 0.28135464, 0.29524353, 0.31273466, 0.33562914, 0.36485288, 0.4012811, 0.42628106, 0.47086504, 0.51510656, 0.55974126, 0.60886604, 0.6551877, 0.7043252, 0.74784374, 0.793861, 0.8307585, 0.8585363, 0.8866185, 0.9082953, 0.9278666, 0.9409183, 0.9530188, 0.9633054, 0.9708397, 0.9775368, 0.9829021, 0.98671997, 0.99090564, 0.9939878, 0.9959158, 0.99707, 0.9976154, 0.99823695, 0.99846524, 0.9986555, 0.99879503, 0.9988077, 0.9990107, 0.9991121, 0.99917555, 0.9993404, 0.9994292, 0.9995307, 0.9995941, 0.9996575, 0.9996829, 0.9997083, 0.9997717, 0.99978435, 0.99986047, 0.99986047, 0.99989855, 0.9999239, 0.9999239, 0.9999239, 0.9999239, 0.9999239, 1.0};
        double[] benchmark_histogram_v = {0.0, 0.007343988, 0.028881278, 0.07170218, 0.099048704, 0.12921105, 0.14080416, 0.15169965, 0.15711568, 0.1643582, 0.16997717, 0.17323694, 0.17738457, 0.1802131, 0.18378995, 0.18631405, 0.19010654, 0.19256723, 0.19674024, 0.19940385, 0.20383054, 0.20792745, 0.2104896, 0.21516997, 0.21822679, 0.22304668, 0.22615424, 0.23195079, 0.23642822, 0.24325216, 0.25092593, 0.2569254, 0.26919076, 0.2789447, 0.2965246, 0.30849823, 0.32848808, 0.34264332, 0.36684424, 0.38329527, 0.41022325, 0.43925673, 0.46319127, 0.5030822, 0.53089803, 0.5697108, 0.59634703, 0.63977677, 0.6687468, 0.71345764, 0.7648275, 0.79545915, 0.8263952, 0.84608066, 0.87458146, 0.8949391, 0.9249112, 0.9408549, 0.9579909, 0.96471334, 0.9694952, 0.97039574, 0.97077626, 0.9715627, 0.9722603, 0.9739599, 0.9772577, 0.98461443, 0.990208, 0.9972983, 0.999962, 0.9999746, 0.9999873, 0.9999873, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0};

        IJ.log("H values");
        for (int i = 0; i < h.length; i++) {
            IJ.log(Double.toString(h[i]));
        }

        IJ.log("V values");
        for (int i = 0; i < v.length; i++) {
            IJ.log(Double.toString(v[i]));
        }

        IJ.log("S values");
        for (int i = 0; i < s.length; i++) {
            IJ.log(Double.toString(s[i]));
        }

        int h_index;
        int s_index;
        int v_index;
        double h_value;
        double s_value;
        double v_value;
        double adj_h_value;
        float[] new_intensities = new float[3];

        for (int i = 0; i < N; i++) {
                for (int j = 0; j < M; j++) {
                    double diff_h = 2;
                    double diff_s = 2;
                    double diff_v = 2;
                    color = new Color(ip.getPixel(j,i));
                    red = color.getRed();
                    green = color.getGreen();
                    blue = color.getBlue();
                    
                    Color.RGBtoHSB (red, green, blue, hsv);
                    h_value = h[(int) (hsv[0]*360)];
                    s_value = s[(int) (hsv[1]*100)];
                    v_value = v[(int) (hsv[2]*100)];

                    for (int k = 0; k < 360; k++) {
                        if (Math.abs(benchmark_histogram_h[k] - h_value) < diff_h) {
                            diff_h = Math.abs(benchmark_histogram_h[k] - h_value);
                            new_intensities[0] = (float) k / 360;
                        }
                    }
                    for (int l = 0; l < 101; l++) {
                        if (Math.abs(benchmark_histogram_s[l] - s_value) < diff_s) {
                            diff_s = Math.abs(benchmark_histogram_s[l] - s_value);
                            new_intensities[1] = (float) l / 101;
                        }
                        if (Math.abs(benchmark_histogram_v[l] - v_value) < diff_v) {
                            diff_v = Math.abs(benchmark_histogram_v[l] - v_value);
                            new_intensities[2] = (float) l / 101;
                        }
                    }
                    ip.putPixel(j, i, Color.HSBtoRGB(new_intensities[0], new_intensities[1], new_intensities[2]));
                }
        } 
    }
    
}